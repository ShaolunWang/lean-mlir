
"builtin.module"()(
 {
  ^entry:
   "func.func"()(
    {
     ^bb0(%arg0:f32):
      %0="arith.addf"(%arg0,%arg0):(f32,f32) -> f32
      "func.return"():() -> ()
    }){
    function_type = (f32) -> ()
    , sym_name = "f"
    }:() -> ()
 }):() -> ()
"builtin.module"()(
 {
  ^entry:
   "func.func"()(
    {
     ^bb0(%arg0:f32):
      "test.br"(%arg0)[^bb1]:(f32) -> ()
     ^bb1(%0:f32):
      "func.return"():() -> ()
    }){
    function_type = (f32) -> ()
    , sym_name = "f"
    }:() -> ()
 }):() -> ()
"builtin.module"()(
 {
  ^entry:
   "func.func"()(
    {
     ^bb0(%arg0:f32):
      "cf.br"(%arg0)[^bb1]:(f32) -> ()
     ^bb1(%0:f32):
      "cf.br"(%0)[^bb1]:(f32) -> ()
    }){
    function_type = (f32) -> ()
    , sym_name = "f"
    }:() -> ()
 }):() -> ()
"builtin.module"()(
 {
  ^entry:
   "func.func"()(
    {
     ^bb0(%arg0:f32):
      "cf.br"(%arg0)[^bb1]:(f32) -> ()
     ^bb1(%0:f32):
      %1="math.exp"(%0):(f32) -> f32
      "cf.br"(%1)[^bb1]:(f32) -> ()
    }){
    function_type = (f32) -> ()
    , sym_name = "f"
    }:() -> ()
 }):() -> ()
"builtin.module"()(
 {
  ^entry:
   "func.func"()(
    {
     ^bb0(%arg0:f32,%arg1:i1):
      %0="math.exp"(%arg0):(f32) -> f32
      "cf.cond_br"(%arg1,%0,%0)[^bb1,^bb2]{operand_segment_sizes = dense<1>:vector<3xi32>}:(i1,f32,f32) -> ()
     ^bb1(%1:f32):
      "func.return"():() -> ()
     ^bb2(%2:f32):
      "func.return"():() -> ()
    }){
    function_type = (f32,i1) -> ()
    , sym_name = "f"
    }:() -> ()
 }):() -> ()
"builtin.module"()(
 {
  ^entry:
   "func.func"()(
    {
     ^bb0(%arg0:f32):
      "func.func"()(
       {
        ^bb0(%arg1:f32):
         %0="arith.addf"(%arg1,%arg1):(f32,f32) -> f32
         "func.return"():() -> ()
       }){
       function_type = (f32) -> ()
       , sym_name = "g"
       }:() -> ()
      "func.return"():() -> ()
    }){
    function_type = (f32) -> ()
    , sym_name = "f"
    }:() -> ()
 }):() -> ()
"builtin.module"()(
 {
  ^entry:
   "func.func"()(
    {
     ^bb0(%arg0:f32):
      %0="arith.addf"(%arg0,%arg0):(f32,f32) -> f32
      "func.return"(%0):(f32) -> ()
    }){
    function_type = (f32) -> f32
    , sym_name = "f"
    }:() -> ()
 }):() -> ()
"builtin.module"()(
 {
  ^entry:
   "func.func"()(
    {
     ^bb0(%arg0:f32):
      "foo.print"(%arg0):(f32) -> ()
      "func.return"():() -> ()
    }){
    function_type = (f32) -> ()
    , sym_name = "f"
    }:() -> ()
 }):() -> ()
"builtin.module"()(
 {
  ^entry:
   "func.func"()(
    {
     ^bb0(%arg0:f32):
      %0="math.exp"(%arg0):(f32) -> f32
      "foo.has_region"()(
       {
        ^entry:
         %1="math.exp"(%0):(f32) -> f32
         "foo.return"():() -> ()
       }):() -> ()
      "func.return"():() -> ()
    }){
    function_type = (f32) -> ()
    , sym_name = "f"
    }:() -> ()
 }):() -> ()
"builtin.module"()(
 {
  ^entry:
   "func.func"()(
    {
     ^bb0(%arg0:vector<1xf32>,%arg1:vector<2xf32>,%arg2:vector<3xf32>,%arg3:vector<4xf32>,%arg4:vector<5xf32>):
      "test.br"(%arg0,%arg1,%arg2,%arg3,%arg4)[^bb1]:(vector<1xf32>,vector<2xf32>,vector<3xf32>,vector<4xf32>,vector<5xf32>) -> ()
     ^bb1(%0:vector<1xf32>,%1:vector<2xf32>,%2:vector<3xf32>,%3:vector<4xf32>,%4:vector<5xf32>):
      "foo.print"(%1):(vector<2xf32>) -> ()
      "foo.print"(%3):(vector<4xf32>) -> ()
      "func.return"():() -> ()
    }){
    function_type = (vector<1xf32>,vector<2xf32>,vector<3xf32>,vector<4xf32>,vector<5xf32>) -> ()
    , sym_name = "f"
    }:() -> ()
 }):() -> ()
"builtin.module"()(
 {
  ^entry:
   "func.func"()(
    {
     ^entry:
      "test.graph_region"()(
       {
        ^entry:
         %0="math.exp"(%1):(f32) -> f32
         %1="math.exp"(%0):(f32) -> f32
         "test.terminator"():() -> ()
       }):() -> ()
      "func.return"():() -> ()
    }){
    function_type = () -> ()
    , sym_name = "f"
    }:() -> ()
 }):() -> ()